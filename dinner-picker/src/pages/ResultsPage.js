import React, { useState, useEffect } from 'react';
import {
    Container,
    Typography,
    Box,
    Button,
    LinearProgress
} from '@mui/material';
import {
    ArrowBack as ArrowBackIcon
} from '@mui/icons-material';
import { useParams, useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import toast from 'react-hot-toast';
import Confetti from 'react-confetti';
import { sessionAPI, optionAPI } from '../services/api';
import ShareResultsDialog from '../dialogs/ShareResultsDialog';

// Import modular components
import ResultsHeader from '../components/ResultsHeader';
import WinnerCard from '../components/WinnerCard';
import ResultsList from '../components/ResultsList';
import ResultsSummaryStats from '../components/ResultsSummaryStats';
import NoVotesPlaceholder from '../components/NoVotesPlaceholder';

const ResultsPage = () => {
    const { sessionId } = useParams();
    const [session, setSession] = useState(null);
    const [options, setOptions] = useState([]);
    const [loading, setLoading] = useState(true);
    const [shareDialogOpen, setShareDialogOpen] = useState(false);
    const [showConfetti, setShowConfetti] = useState(false);
    const navigate = useNavigate();

    const fetchResults = async () => {
        try {
            setLoading(true);
            const [sessionResponse, optionsResponse] = await Promise.all([
                sessionAPI.getSession(sessionId),
                optionAPI.getSessionOptions(sessionId)
            ]);

            setSession(sessionResponse.data);
            setOptions(optionsResponse.data.sort((a, b) => b.votes - a.votes));
        } catch (error) {
            toast.error('Failed to load results');
            navigate('/groups');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchResults();
        // Show confetti on page load
        setShowConfetti(true);
        setTimeout(() => setShowConfetti(false), 3000);
    }, [sessionId]);

    const totalVotes = options.reduce((sum, option) => sum + option.votes, 0);
    const winner = options.length > 0 && options[0].votes > 0 ? options[0] : null;
    const hasVotes = options.some(option => option.votes > 0);

    const getPercentage = (votes) => {
        return totalVotes > 0 ? Math.round((votes / totalVotes) * 100) : 0;
    };

    const exportResults = () => {
        const getMedalEmoji = (rank) => {
            switch(rank) {
                case 1: return 'ü•á';
                case 2: return 'ü•à';
                case 3: return 'ü•â';
                default: return `#${rank}`;
            }
        };

        const resultsText = `
üçΩÔ∏è ${session?.title || 'Dining Vote'} Results
${session?.description ? `üìù ${session.description}\n` : ''}
üìä Total Votes: ${totalVotes}
üìÖ ${new Date().toLocaleDateString()}

${winner ? `üèÜ WINNER: ${winner.name} (${winner.votes} votes)\n` : ''}

üìà Full Results:
${options.map((option, index) =>
            `${getMedalEmoji(index + 1)} ${option.name}: ${option.votes} votes (${getPercentage(option.votes)}%)`
        ).join('\n')}

Generated by DinePick üçú
    `.trim();

        const blob = new Blob([resultsText], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `dining-vote-results-${new Date().toISOString().split('T')[0]}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        toast.success('Results exported! üìÑ');
    };

    if (loading) {
        return (
            <Container maxWidth="lg">
                <Box sx={{ py: 4 }}>
                    <LinearProgress sx={{ mb: 4, borderRadius: 2, height: 6 }} />
                    <Typography variant="h5" sx={{ color: 'white', textAlign: 'center' }}>
                        Calculating results...
                    </Typography>
                </Box>
            </Container>
        );
    }

    if (!session) {
        return (
            <Container maxWidth="lg">
                <Box sx={{ py: 4, textAlign: 'center' }}>
                    <Typography variant="h4" sx={{ color: 'white' }}>Session not found</Typography>
                    <Button onClick={() => navigate('/groups')} sx={{ mt: 2, color: 'white' }}>
                        Back to Groups
                    </Button>
                </Box>
            </Container>
        );
    }

    return (
        <Container maxWidth="lg">
            {showConfetti && (
                <Confetti
                    width={window.innerWidth}
                    height={window.innerHeight}
                    numberOfPieces={100}
                    gravity={0.1}
                />
            )}

            <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
            >
                <Box sx={{ py: 4 }}>
                    <Button
                        startIcon={<ArrowBackIcon />}
                        onClick={() => navigate(`/sessions/${sessionId}`)}
                        sx={{ mb: 3, color: 'white' }}
                    >
                        Back to Session
                    </Button>

                    {/* Header Component */}
                    <ResultsHeader 
                        session={session}
                        options={options}
                        totalVotes={totalVotes}
                        onShareClick={() => setShareDialogOpen(true)}
                        onExportClick={exportResults}
                    />

                    {!hasVotes ? (
                        <NoVotesPlaceholder />
                    ) : (
                        <>
                            {/* Winner Card Component */}
                            <WinnerCard 
                                winner={winner}
                                getPercentage={getPercentage}
                            />

                            {/* Results List Component */}
                            <ResultsList 
                                options={options}
                                getPercentage={getPercentage}
                            />

                            {/* Summary Stats Component */}
                            <ResultsSummaryStats 
                                options={options}
                                totalVotes={totalVotes}
                                winner={winner}
                            />
                        </>
                    )}
                </Box>
            </motion.div>

            <ShareResultsDialog
                open={shareDialogOpen}
                onClose={() => setShareDialogOpen(false)}
                session={session}
                winner={winner}
            />
        </Container>
    );
};

export default ResultsPage;
